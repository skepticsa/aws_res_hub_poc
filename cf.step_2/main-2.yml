AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create a VPC with public and private subnets, an Internet Gateway (IGW), and NATs.'
Parameters:
  Project:
    Type: String
    Default: 'cf-res-1'
    Description: 'The name of the project.'
  Region:
    Type: String
    Default: 'us-east-1'
    Description: 'The AWS Region.'
  VpcCidrBlock:
    Type: String
    Default: '10.1.0.0/16'
    Description: 'The CIDR block for the VPC.'
  PublicSubnet1CidrBlock:
    Type: String
    Default: '10.1.1.0/24'
    Description: 'The CIDR block for the first public subnet.'
  PublicSubnet2CidrBlock:
    Type: String
    Default: '10.1.2.0/24'
    Description: 'The CIDR block for the second public subnet.'
  PrivateSubnet1CidrBlock:
    Type: String
    Default: '10.1.3.0/24'
    Description: 'The CIDR block for the first private subnet.'
  PrivateSubnet2CidrBlock:
    Type: String
    Default: '10.1.4.0/24'
    Description: 'The CIDR block for the second private subnet.'
  InstanceType:
    Type: String
    Default: t3.micro
    Description: 'The instance type for the EC2 instance.'
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: 'The instance class for the RDS PostgreSQL instance.'
  MyIP:
    Type: String
    Description: 'The CIDR of my IP.'    
  DBMasterUsername:
    Type: String
    Description: 'The DB master username'    
  DBMasterPassword:
    Type: String
    Description: 'The DB master password'  

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
        - Key: project
          Value: !Sub ${AWS::StackName}  
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${Region}.s3
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PublicRouteTable
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-s3-6afde6ae-8014-4bf9-b515-eeb36be991df
      VersioningConfiguration:
        Status: Enabled     
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: project
          Value: !Sub ${AWS::StackName}      
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
        - Key: project
          Value: !Sub ${AWS::StackName}           
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway                       
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1
        - Key: project
          Value: !Sub ${AWS::StackName}
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable                     
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2
        - Key: project
          Value: !Sub ${AWS::StackName}   
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable                    
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1
        - Key: project
          Value: !Sub ${AWS::StackName}           
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2
        - Key: project
          Value: !Sub ${AWS::StackName}           
  NATGateway1EIP:
    Type : "AWS::EC2::EIP"
    DependsOn : "InternetGatewayAttachment"
    Properties :
        Domain : "vpc"
  NATGateway1:
    Type : "AWS::EC2::NatGateway"
    Properties :
        AllocationId : !GetAtt NATGateway1EIP.AllocationId
        SubnetId : !Ref PublicSubnet1
        Tags:
        - Key: project
          Value: !Sub ${AWS::StackName}       
  NATGateway2EIP:
    Type : "AWS::EC2::EIP"
    DependsOn : "InternetGatewayAttachment"
    Properties :
        Domain : "vpc"
  NATGateway2:
    Type : "AWS::EC2::NatGateway"
    Properties :
        AllocationId : !GetAtt NATGateway2EIP.AllocationId
        SubnetId : !Ref PublicSubnet2
        Tags:
        - Key: project
          Value: !Sub ${AWS::StackName}          

  SgEC2SSH:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow access to SSH from my ip
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref MyIP
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref MyIP          
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Ref MyIP                

  SgRdsEC2:
      Type: AWS::RDS::DBSecurityGroup
      Properties:
        GroupDescription: Allow access to PostgreSQL database
        EC2VpcId: !Ref VPC
        DBSecurityGroupIngress:
            EC2SecurityGroupId: !Ref SgEC2SSH       

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb 
      SecurityGroups:
        - !Ref SgEC2SSH
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-elb         
        - Key: project
          Value: !Sub ${AWS::StackName}        

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0323c3dd2da7fb37d
      InstanceType: t3.micro
      KeyName: resilience
      SecurityGroups:
        - !Ref SgEC2SSH

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-target-group
      Port: 80
      Protocol: HTTP
      Targets:
        - Id:
            Ref: LoadBalancer
          Port: 80
      VpcId:
        !Ref VPC

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2   
          PropagateAtLaunch: True         
        - Key: project
          Value: !Sub ${AWS::StackName}
          PropagateAtLaunch: True         

  EC2InstanceInPublicSubnet1:
    Type : "AWS::EC2::Instance"
    Properties :
        InstanceType : "t3.micro"
        ImageId : "ami-0323c3dd2da7fb37d"
        SubnetId : !Ref PublicSubnet1
        KeyName: resilience
        SecurityGroupIds:
          - !Ref SgEC2SSH
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2            
        - Key: project
          Value: !Sub ${AWS::StackName}

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AWS::StackName}-rds-subnet-group
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSPGSQLInPrivateSubnet1:
    Type : "AWS::RDS::DBInstance"
    Properties :
        DBInstanceClass : !Sub "${DBInstanceClass}"
        Engine : "postgres"
        EngineVersion : "15.2"
        DBSubnetGroupName: !Ref DBSubnetGroup
        DBInstanceIdentifier : !Sub ${AWS::StackName}-rds
        AllocatedStorage: 16
        MasterUsername : !Ref DBMasterUsername
        MasterUserPassword : !Ref DBMasterPassword
        MultiAZ: true
        BackupRetentionPeriod: 7
        DBSecurityGroups:
        - !Ref SgRdsEC2        
        Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-rds            
        - Key: project
          Value: !Sub ${AWS::StackName}       

  ResourceGroup:
      Type: AWS::ResourceGroups::Group
      Properties:
        Name: !Sub ${AWS::StackName}-RG
        Description: !Sub ${AWS::StackName}-Resource-group
        ResourceQuery:
          Type: TAG_FILTERS_1_0
          Query:
            ResourceTypeFilters:
              - AWS::AllSupported
            TagFilters:
              - Key: project
                Values:
                  - !Sub ${AWS::StackName}

